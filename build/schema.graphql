type Protocol @entity {
  id: ID!
  address: String!
  paused: Boolean!
  l0Admin: [String!]!
  l1Admin: [String!]!
  l2Admin: [String!]!
}

type Pool @entity {
  id: ID!
  protocol: Protocol!

  name: String!
  symbol: String!

  # Rewards
  rewardTokens: [Token!]!
  rewardSpeeds: [BigInt!]!
  
  # Params
  feeToken: String!
  issuerAlloc: Int!
  oracle: String!
  paused: Boolean!
  totalSupply: BigInt!
  totalDebtUSD: BigInt!

  # Assets
  synthIds: [String!]!
  collateralIds: [String!]!
  synths: [Synth!]! @derivedFrom(field: "pool")
  collaterals: [Collateral!]! @derivedFrom(field: "pool")
}

type PoolDayData @entity {
  id: ID!
  dayId: Int!
  pool: Pool!

  ## Activity
  dailyDepositsUSD: BigInt!
  dailyWithdrawalsUSD: BigInt!
  dailyMintedUSD: BigInt!
  dailyBurnedUSD: BigInt!

  ## Total by end of the day
  totalDeposits: BigInt!
  totalDebtUSD: BigInt!

  ## Revenue
  dailyRevenueUSD: BigInt!
  totalRevenueUSD: BigInt!
}

type Synth @entity {
  ## {synth}
  id: ID!
  pool: Pool!
  isEnabled: Boolean!
  mintFee: BigInt!
  burnFee: BigInt!
  token: Token!

  ## Price Data
  priceUSD: BigInt!
  lastPriceUpdate: Int!
}

type SynthDayData @entity {
  id: ID!
  dayId: Int!
  synth: Synth!

  ## Activity
  dailyMintedUSD: BigInt!
  dailyBurnedUSD: BigInt!

  ## Total by end of the day
  totalMinted: BigInt!
  totalBurned: BigInt!
}

type Collateral @entity {
  ## {collateral}-{pool}
  id: ID!
  pool: Pool!
  token: Token!

  ## Params
  isEnabled: Boolean!
  cap: BigInt!
  totalDeposits: BigInt! 
  baseLTV: Int!
  liqThreshold: Int!
  liqBonus: Int!
  liqProtocolFee: Int!

  totalPositions: Int!
  cumulativeEnteredPositions: Int!
  cumulativeExitedPositions: Int!

  ## Price Data
  priceUSD: BigInt!
  lastPriceUpdate: Int!
}

type CollateralDayData @entity {
  id: ID!
  dayId: Int!
  collateral: Collateral!

  ## Activity
  dailyDepositsUSD: BigInt!
  dailyWithdrawalsUSD: BigInt!

  ## Total by end of the day
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
}

type Account @entity {
  id: ID!
  address: String!
  positions: [AccountPosition!]! @derivedFrom(field: "account")
}

type AccountPosition @entity {
  ## {account}-{pool}
  id: ID!
  account: Account!
  pool: Pool!
  balance: BigInt!
  collateralBalances: [AccountBalance!]! @derivedFrom(field: "accountPosition")
}

type AccountBalance @entity {
  id: ID!
  accountPosition: AccountPosition!
  collateral: Collateral!
  hasEntered: Boolean!
  balance: BigInt!
}

type Token @entity {
  id: ID!
  address: String!
  name: String!
  symbol: String!
  decimals: Int!
  totalSupply: BigInt!
}