// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralEntered extends ethereum.Event {
  get params(): CollateralEntered__Params {
    return new CollateralEntered__Params(this);
  }
}

export class CollateralEntered__Params {
  _event: CollateralEntered;

  constructor(event: CollateralEntered) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollateralExited extends ethereum.Event {
  get params(): CollateralExited__Params {
    return new CollateralExited__Params(this);
  }
}

export class CollateralExited__Params {
  _event: CollateralExited;

  constructor(event: CollateralExited) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollateralParamsUpdated extends ethereum.Event {
  get params(): CollateralParamsUpdated__Params {
    return new CollateralParamsUpdated__Params(this);
  }
}

export class CollateralParamsUpdated__Params {
  _event: CollateralParamsUpdated;

  constructor(event: CollateralParamsUpdated) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get cap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get baseLTV(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liqThreshold(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liqBonus(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liqProtocolFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isEnabled(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeTokenUpdated extends ethereum.Event {
  get params(): FeeTokenUpdated__Params {
    return new FeeTokenUpdated__Params(this);
  }
}

export class FeeTokenUpdated__Params {
  _event: FeeTokenUpdated;

  constructor(event: FeeTokenUpdated) {
    this._event = event;
  }

  get feeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class IssuerAllocUpdated extends ethereum.Event {
  get params(): IssuerAllocUpdated__Params {
    return new IssuerAllocUpdated__Params(this);
  }
}

export class IssuerAllocUpdated__Params {
  _event: IssuerAllocUpdated;

  constructor(event: IssuerAllocUpdated) {
    this._event = event;
  }

  get issuerAlloc(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PriceOracleUpdated extends ethereum.Event {
  get params(): PriceOracleUpdated__Params {
    return new PriceOracleUpdated__Params(this);
  }
}

export class PriceOracleUpdated__Params {
  _event: PriceOracleUpdated;

  constructor(event: PriceOracleUpdated) {
    this._event = event;
  }

  get priceOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SynthRemoved extends ethereum.Event {
  get params(): SynthRemoved__Params {
    return new SynthRemoved__Params(this);
  }
}

export class SynthRemoved__Params {
  _event: SynthRemoved;

  constructor(event: SynthRemoved) {
    this._event = event;
  }

  get synth(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SynthUpdated extends ethereum.Event {
  get params(): SynthUpdated__Params {
    return new SynthUpdated__Params(this);
  }
}

export class SynthUpdated__Params {
  _event: SynthUpdated;

  constructor(event: SynthUpdated) {
    this._event = event;
  }

  get synth(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isEnabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get mintFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get burnFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Pool__collateralsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Pool__getAccountLiquidityResultLiqStruct extends ethereum.Tuple {
  get liquidity(): BigInt {
    return this[0].toBigInt();
  }

  get collateral(): BigInt {
    return this[1].toBigInt();
  }

  get debt(): BigInt {
    return this[2].toBigInt();
  }
}

export class Pool__synthsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  BASIS_POINTS(): BigInt {
    let result = super.call("BASIS_POINTS", "BASIS_POINTS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASIS_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASIS_POINTS", "BASIS_POINTS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ETH_ADDRESS(): Address {
    let result = super.call("ETH_ADDRESS", "ETH_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_ETH_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH_ADDRESS", "ETH_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SCALER(): BigInt {
    let result = super.call("SCALER", "SCALER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SCALER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SCALER", "SCALER():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountCollateralBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "accountCollateralBalance",
      "accountCollateralBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_accountCollateralBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountCollateralBalance",
      "accountCollateralBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountCollaterals(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "accountCollaterals",
      "accountCollaterals(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_accountCollaterals(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountCollaterals",
      "accountCollaterals(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountMembership(param0: Address, param1: Address): boolean {
    let result = super.call(
      "accountMembership",
      "accountMembership(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_accountMembership(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "accountMembership",
      "accountMembership(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collaterals(param0: Address): Pool__collateralsResult {
    let result = super.call(
      "collaterals",
      "collaterals(address):(bool,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Pool__collateralsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_collaterals(
    param0: Address
  ): ethereum.CallResult<Pool__collateralsResult> {
    let result = super.tryCall(
      "collaterals",
      "collaterals(address):(bool,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__collateralsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  commitBurn(_account: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "commitBurn",
      "commitBurn(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_commitBurn(
    _account: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitBurn",
      "commitBurn(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitLiquidate(
    _liquidator: Address,
    _account: Address,
    _amount: BigInt,
    _outAsset: Address
  ): BigInt {
    let result = super.call(
      "commitLiquidate",
      "commitLiquidate(address,address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_liquidator),
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_outAsset)
      ]
    );

    return result[0].toBigInt();
  }

  try_commitLiquidate(
    _liquidator: Address,
    _account: Address,
    _amount: BigInt,
    _outAsset: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitLiquidate",
      "commitLiquidate(address,address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_liquidator),
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_outAsset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitMint(_account: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "commitMint",
      "commitMint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_commitMint(
    _account: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitMint",
      "commitMint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitSwap(_account: Address, _amount: BigInt, _synthTo: Address): BigInt {
    let result = super.call(
      "commitSwap",
      "commitSwap(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_synthTo)
      ]
    );

    return result[0].toBigInt();
  }

  try_commitSwap(
    _account: Address,
    _amount: BigInt,
    _synthTo: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitSwap",
      "commitSwap(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_synthTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeToken(): Address {
    let result = super.call("feeToken", "feeToken():(address)", []);

    return result[0].toAddress();
  }

  try_feeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeToken", "feeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAccountLiquidity(
    _account: Address
  ): Pool__getAccountLiquidityResultLiqStruct {
    let result = super.call(
      "getAccountLiquidity",
      "getAccountLiquidity(address):((int256,uint256,uint256))",
      [ethereum.Value.fromAddress(_account)]
    );

    return changetype<Pool__getAccountLiquidityResultLiqStruct>(
      result[0].toTuple()
    );
  }

  try_getAccountLiquidity(
    _account: Address
  ): ethereum.CallResult<Pool__getAccountLiquidityResultLiqStruct> {
    let result = super.tryCall(
      "getAccountLiquidity",
      "getAccountLiquidity(address):((int256,uint256,uint256))",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pool__getAccountLiquidityResultLiqStruct>(value[0].toTuple())
    );
  }

  getSynths(): Array<Address> {
    let result = super.call("getSynths", "getSynths():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getSynths(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getSynths", "getSynths():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTotalDebtUSD(): BigInt {
    let result = super.call(
      "getTotalDebtUSD",
      "getTotalDebtUSD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalDebtUSD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDebtUSD",
      "getTotalDebtUSD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserDebtUSD(_account: Address): BigInt {
    let result = super.call(
      "getUserDebtUSD",
      "getUserDebtUSD(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_getUserDebtUSD(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserDebtUSD",
      "getUserDebtUSD(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issuerAlloc(): BigInt {
    let result = super.call("issuerAlloc", "issuerAlloc():(uint256)", []);

    return result[0].toBigInt();
  }

  try_issuerAlloc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("issuerAlloc", "issuerAlloc():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  priceOracle(): Address {
    let result = super.call("priceOracle", "priceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_priceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceOracle", "priceOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  synthex(): Address {
    let result = super.call("synthex", "synthex():(address)", []);

    return result[0].toAddress();
  }

  try_synthex(): ethereum.CallResult<Address> {
    let result = super.tryCall("synthex", "synthex():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  synths(param0: Address): Pool__synthsResult {
    let result = super.call(
      "synths",
      "synths(address):(bool,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Pool__synthsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_synths(param0: Address): ethereum.CallResult<Pool__synthsResult> {
    let result = super.tryCall(
      "synths",
      "synths(address):(bool,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__synthsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  synthsList(param0: BigInt): Address {
    let result = super.call("synthsList", "synthsList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_synthsList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("synthsList", "synthsList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddSynthCall extends ethereum.Call {
  get inputs(): AddSynthCall__Inputs {
    return new AddSynthCall__Inputs(this);
  }

  get outputs(): AddSynthCall__Outputs {
    return new AddSynthCall__Outputs(this);
  }
}

export class AddSynthCall__Inputs {
  _call: AddSynthCall;

  constructor(call: AddSynthCall) {
    this._call = call;
  }

  get _synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mintFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get burnFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddSynthCall__Outputs {
  _call: AddSynthCall;

  constructor(call: AddSynthCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CommitBurnCall extends ethereum.Call {
  get inputs(): CommitBurnCall__Inputs {
    return new CommitBurnCall__Inputs(this);
  }

  get outputs(): CommitBurnCall__Outputs {
    return new CommitBurnCall__Outputs(this);
  }
}

export class CommitBurnCall__Inputs {
  _call: CommitBurnCall;

  constructor(call: CommitBurnCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CommitBurnCall__Outputs {
  _call: CommitBurnCall;

  constructor(call: CommitBurnCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CommitLiquidateCall extends ethereum.Call {
  get inputs(): CommitLiquidateCall__Inputs {
    return new CommitLiquidateCall__Inputs(this);
  }

  get outputs(): CommitLiquidateCall__Outputs {
    return new CommitLiquidateCall__Outputs(this);
  }
}

export class CommitLiquidateCall__Inputs {
  _call: CommitLiquidateCall;

  constructor(call: CommitLiquidateCall) {
    this._call = call;
  }

  get _liquidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _outAsset(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CommitLiquidateCall__Outputs {
  _call: CommitLiquidateCall;

  constructor(call: CommitLiquidateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CommitMintCall extends ethereum.Call {
  get inputs(): CommitMintCall__Inputs {
    return new CommitMintCall__Inputs(this);
  }

  get outputs(): CommitMintCall__Outputs {
    return new CommitMintCall__Outputs(this);
  }
}

export class CommitMintCall__Inputs {
  _call: CommitMintCall;

  constructor(call: CommitMintCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CommitMintCall__Outputs {
  _call: CommitMintCall;

  constructor(call: CommitMintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CommitSwapCall extends ethereum.Call {
  get inputs(): CommitSwapCall__Inputs {
    return new CommitSwapCall__Inputs(this);
  }

  get outputs(): CommitSwapCall__Outputs {
    return new CommitSwapCall__Outputs(this);
  }
}

export class CommitSwapCall__Inputs {
  _call: CommitSwapCall;

  constructor(call: CommitSwapCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _synthTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CommitSwapCall__Outputs {
  _call: CommitSwapCall;

  constructor(call: CommitSwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }
}

export class EnterCollateralCall extends ethereum.Call {
  get inputs(): EnterCollateralCall__Inputs {
    return new EnterCollateralCall__Inputs(this);
  }

  get outputs(): EnterCollateralCall__Outputs {
    return new EnterCollateralCall__Outputs(this);
  }
}

export class EnterCollateralCall__Inputs {
  _call: EnterCollateralCall;

  constructor(call: EnterCollateralCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnterCollateralCall__Outputs {
  _call: EnterCollateralCall;

  constructor(call: EnterCollateralCall) {
    this._call = call;
  }
}

export class ExitCollateralCall extends ethereum.Call {
  get inputs(): ExitCollateralCall__Inputs {
    return new ExitCollateralCall__Inputs(this);
  }

  get outputs(): ExitCollateralCall__Outputs {
    return new ExitCollateralCall__Outputs(this);
  }
}

export class ExitCollateralCall__Inputs {
  _call: ExitCollateralCall;

  constructor(call: ExitCollateralCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExitCollateralCall__Outputs {
  _call: ExitCollateralCall;

  constructor(call: ExitCollateralCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _synthex(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveSynthCall extends ethereum.Call {
  get inputs(): RemoveSynthCall__Inputs {
    return new RemoveSynthCall__Inputs(this);
  }

  get outputs(): RemoveSynthCall__Outputs {
    return new RemoveSynthCall__Outputs(this);
  }
}

export class RemoveSynthCall__Inputs {
  _call: RemoveSynthCall;

  constructor(call: RemoveSynthCall) {
    this._call = call;
  }

  get _synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveSynthCall__Outputs {
  _call: RemoveSynthCall;

  constructor(call: RemoveSynthCall) {
    this._call = call;
  }
}

export class SetFeeTokenCall extends ethereum.Call {
  get inputs(): SetFeeTokenCall__Inputs {
    return new SetFeeTokenCall__Inputs(this);
  }

  get outputs(): SetFeeTokenCall__Outputs {
    return new SetFeeTokenCall__Outputs(this);
  }
}

export class SetFeeTokenCall__Inputs {
  _call: SetFeeTokenCall;

  constructor(call: SetFeeTokenCall) {
    this._call = call;
  }

  get _feeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeTokenCall__Outputs {
  _call: SetFeeTokenCall;

  constructor(call: SetFeeTokenCall) {
    this._call = call;
  }
}

export class SetIssuerAllocCall extends ethereum.Call {
  get inputs(): SetIssuerAllocCall__Inputs {
    return new SetIssuerAllocCall__Inputs(this);
  }

  get outputs(): SetIssuerAllocCall__Outputs {
    return new SetIssuerAllocCall__Outputs(this);
  }
}

export class SetIssuerAllocCall__Inputs {
  _call: SetIssuerAllocCall;

  constructor(call: SetIssuerAllocCall) {
    this._call = call;
  }

  get _issuerAlloc(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetIssuerAllocCall__Outputs {
  _call: SetIssuerAllocCall;

  constructor(call: SetIssuerAllocCall) {
    this._call = call;
  }
}

export class SetPriceOracleCall extends ethereum.Call {
  get inputs(): SetPriceOracleCall__Inputs {
    return new SetPriceOracleCall__Inputs(this);
  }

  get outputs(): SetPriceOracleCall__Outputs {
    return new SetPriceOracleCall__Outputs(this);
  }
}

export class SetPriceOracleCall__Inputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }

  get _priceOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPriceOracleCall__Outputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateCollateralCall extends ethereum.Call {
  get inputs(): UpdateCollateralCall__Inputs {
    return new UpdateCollateralCall__Inputs(this);
  }

  get outputs(): UpdateCollateralCall__Outputs {
    return new UpdateCollateralCall__Outputs(this);
  }
}

export class UpdateCollateralCall__Inputs {
  _call: UpdateCollateralCall;

  constructor(call: UpdateCollateralCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _params(): UpdateCollateralCall_paramsStruct {
    return changetype<UpdateCollateralCall_paramsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdateCollateralCall__Outputs {
  _call: UpdateCollateralCall;

  constructor(call: UpdateCollateralCall) {
    this._call = call;
  }
}

export class UpdateCollateralCall_paramsStruct extends ethereum.Tuple {
  get isEnabled(): boolean {
    return this[0].toBoolean();
  }

  get cap(): BigInt {
    return this[1].toBigInt();
  }

  get totalDeposits(): BigInt {
    return this[2].toBigInt();
  }

  get baseLTV(): BigInt {
    return this[3].toBigInt();
  }

  get liqThreshold(): BigInt {
    return this[4].toBigInt();
  }

  get liqBonus(): BigInt {
    return this[5].toBigInt();
  }

  get liqProtocolFee(): BigInt {
    return this[6].toBigInt();
  }
}

export class UpdateSynthCall extends ethereum.Call {
  get inputs(): UpdateSynthCall__Inputs {
    return new UpdateSynthCall__Inputs(this);
  }

  get outputs(): UpdateSynthCall__Outputs {
    return new UpdateSynthCall__Outputs(this);
  }
}

export class UpdateSynthCall__Inputs {
  _call: UpdateSynthCall;

  constructor(call: UpdateSynthCall) {
    this._call = call;
  }

  get _synth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _params(): UpdateSynthCall_paramsStruct {
    return changetype<UpdateSynthCall_paramsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdateSynthCall__Outputs {
  _call: UpdateSynthCall;

  constructor(call: UpdateSynthCall) {
    this._call = call;
  }
}

export class UpdateSynthCall_paramsStruct extends ethereum.Tuple {
  get isEnabled(): boolean {
    return this[0].toBoolean();
  }

  get mintFee(): BigInt {
    return this[1].toBigInt();
  }

  get burnFee(): BigInt {
    return this[2].toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawETHCall extends ethereum.Call {
  get inputs(): WithdrawETHCall__Inputs {
    return new WithdrawETHCall__Inputs(this);
  }

  get outputs(): WithdrawETHCall__Outputs {
    return new WithdrawETHCall__Outputs(this);
  }
}

export class WithdrawETHCall__Inputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawETHCall__Outputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}
